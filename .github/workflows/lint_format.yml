# .github/workflows/lint_format.yml

name: Linting and Formatting

on:
  # Trigger on pull requests opened against 'main' or when new commits are pushed
  pull_request:
    types: [opened, synchronize]
    branches: [ main ] # Adjust if your main branch has a different name (e.g., master)

  # Trigger specifically when a pull request *closed* AND *merged* into 'main'
  pull_request_target: # Use pull_request_target for merge event to get write permissions easily
    types: [closed]
    branches: [ main ]

# Permissions required by the jobs
permissions:
  contents: write      # Needed for format_on_merge to push commits
  checks: write        # Needed for lint job to post status checks
  pull-requests: write # Needed for lint job to comment on PRs

jobs:
  # == JOB 1: Run Flake8 Linting on Pull Requests ==
  lint:
    name: Flake8 Linting
    # Only run this job for 'opened' or 'synchronize' events (standard PR checks)
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest

    steps:
      # Step 1.1: Checkout the code from the PR branch
      - name: Checkout code
        uses: actions/checkout@v4
        # Fetch full depth only if needed by specific flake8 plugins or configurations
        # with:
        #   fetch-depth: 0

      # Step 1.2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Use the same version as your main build

      # Step 1.3: Install Flake8 (and any plugins if needed)
      # Consider adding flake8 plugins like flake8-bugbear, flake8-import-order if you use them
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          # Example: pip install flake8 flake8-bugbear flake8-import-order

      # Step 1.4: Run Flake8 using reviewdog action to comment on PR
      - name: Run Flake8 with reviewdog
        uses: reviewdog/action-flake8@v1 # Uses reviewdog to format/comment
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check # Posts comments as checks on the PR 'Files changed' tab
          fail_on_error: true      # Fail the workflow step if flake8 finds errors
          # Optional: Specify flake8 arguments if needed (e.g., config file)
          # flake8_args: "--config=.flake8 ."
          # By default, it runs flake8 on the whole repository. Adjust path if needed:
          flake8_args: "chromadesk tests" # Example: Lint specific directories

  # == JOB 2: Format Code with Black After Merge ==
  format_on_merge:
    name: Format with Black on Merge
    # IMPORTANT: Only run this job if the event is 'closed' AND the PR was 'merged'
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Step 2.1: Checkout the code of the BASE branch (the branch the PR was merged INTO)
      - name: Checkout base branch code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }} # Checkout e.g., 'main'

      # Step 2.2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Use consistent Python version

      # Step 2.3: Install Black
      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black

      # Step 2.4: Run Black to format the code in place
      # Adjust directories if needed (e.g., 'black chromadesk tests')
      - name: Run Black Formatter
        run: |
          black .

      # Step 2.5: Commit and push the changes if Black made any modifications
      - name: Commit formatting changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Required: Message for the commit
          commit_message: "Format Python code with Black [skip ci]"
          # Branch to commit to (should be the base branch of the merged PR)
          branch: ${{ github.event.pull_request.base.ref }}
          # Optional: Specify file pattern to commit (e.g., only *.py)
          file_pattern: "*.py"
          # Optional: Commit user and email
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          # Optional: Add commit options (e.g., --no-verify to skip pre-commit hooks)
          # commit_options: "--no-verify"
          # Optional: Add push options
          # push_options: "--force" # Use with caution! Usually not needed.