# .github/workflows/release.yml

name: Build and Release AppImage (Multi-OS LTS)

# --- Tells GitHub Actions WHEN to run this workflow ---
on:
  push:
    tags:
      - 'v*' # Trigger on tags like v0.1.0, v1.0.0 etc.
  # Allow manual triggering from the Actions tab in GitHub
  workflow_dispatch:
# --- End of trigger definition ---

# Permissions needed for the workflow to interact with the repo
permissions:
  contents: write # Required by softprops/action-gh-release to create releases and upload assets

jobs:
  # == JOB 1: Build the AppImage on multiple Ubuntu LTS versions ==
  build:
    strategy:
      # Define the OS versions to run the build job on
      matrix:
        os: [ubuntu-20.04, ubuntu-24.04] # Legacy (20.04) and Modern (24.04) LTS
      # Don't cancel all builds if one OS in the matrix fails
      fail-fast: false
    # Dynamic job name based on the OS from the matrix
    name: Build on ${{ matrix.os }}
    # Set the runner environment based on the OS from the matrix
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1.1: Get the source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1.2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Specify desired Python version

      # Step 1.3: Install OS-level packages needed for the build
      - name: Install System Build Dependencies
        run: |
          sudo apt-get update
          # Install necessary tools and libraries.
          # libglib2.0-dev is crucial for building dbus-python, a dependency for notifications.
          sudo apt-get install -y --no-install-recommends \
            patchelf \
            desktop-file-utils \
            libfuse2 \
            fakeroot \
            libdbus-1-dev \
            pkg-config \
            libglib2.0-dev   # <-- Ensures dbus-python builds correctly
          echo "System dependencies installed on ${{ matrix.os }}"

      # Step 1.4: Get the appimagetool utility
      - name: Download and Install appimagetool
        run: |
          APPIMAGETOOL_URL="https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          echo "Downloading appimagetool from ${APPIMAGETOOL_URL}..."
          wget -q "${APPIMAGETOOL_URL}" -O appimagetool.AppImage
          chmod +x appimagetool.AppImage
          sudo mv appimagetool.AppImage /usr/local/bin/appimagetool
          echo "appimagetool installed to /usr/local/bin/appimagetool"

      # Step 1.5: Extract the project version from pyproject.toml
      - name: Get Project Version
        id: get_project_version
        run: |
          # Robust version reading from pyproject.toml (supports project/poetry tables and Python 3.11+ tomllib or older tomli)
          VERSION_CMD=""
          if python -c "import sys; sys.exit(0) if sys.version_info >= (3, 11) else sys.exit(1)"; then
              if python -c "import tomllib; data=tomllib.load(open('pyproject.toml', 'rb')); exit(0) if 'project' in data and 'version' in data['project'] else exit(1)"; then
                  VERSION_CMD="import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])"; echo "Reading version using tomllib [project]"
              elif python -c "import tomllib; data=tomllib.load(open('pyproject.toml', 'rb')); exit(0) if 'tool' in data and 'poetry' in data['tool'] and 'version' in data['tool']['poetry'] else exit(1)"; then
                  VERSION_CMD="import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['tool']['poetry']['version'])"; echo "Reading version using tomllib [poetry]"
              else echo "ERROR: Could not find version key in pyproject.toml (Python 3.11+)"; cat pyproject.toml; exit 1; fi
          else
              # Older Python, try installing and using tomli
              pip install tomli
              if python -c "import tomli; data=tomli.load(open('pyproject.toml', 'rb')); exit(0) if 'project' in data and 'version' in data['project'] else exit(1)"; then
                  VERSION_CMD="import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])"; echo "Reading version using tomli [project]"
              elif python -c "import tomli; data=tomli.load(open('pyproject.toml', 'rb')); exit(0) if 'tool' in data and 'poetry' in data['tool'] and 'version' in data['tool']['poetry'] else exit(1)"; then
                  VERSION_CMD="import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['tool']['poetry']['version'])"; echo "Reading version using tomli [poetry]"
              else echo "ERROR: Could not find version key in pyproject.toml (tomli)"; cat pyproject.toml; exit 1; fi
          fi
          PROJECT_VERSION=$(python -c "${VERSION_CMD}")
          if [ -z "$PROJECT_VERSION" ]; then echo "ERROR: Failed to extract project version."; exit 1; fi
          # Make the version available to other steps/jobs
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "Project version found: ${PROJECT_VERSION}"

      # Step 1.6: Install Python dependencies (including optional ones)
      - name: Install Python Build Dependencies & Project
        run: |
          python -m pip install --upgrade pip
          # Install tools needed to build the package itself
          pip install build setuptools wheel
          # Ensure the specific version of PySide6 is installed first
          echo "Installing/Upgrading PySide6 (pinned)..."
          pip install --upgrade "PySide6==6.8.3" # Use consistent latest stable PySide
          pip show PySide6 # Log installed version for verification
          # Install the project itself along with its core dependencies from pyproject.toml
          echo "Installing project dependencies..."
          pip install .
          # Install optional dependencies defined in pyproject.toml [project.optional-dependencies]
          echo "Installing optional dependencies [notifications]..."
          pip install ".[notifications]" # This needs libglib2.0-dev from previous step

      # Step 1.7: Run the main build script to create the AppDir and initial AppImage
      - name: Build AppImage using build.sh
        run: |
          chmod +x ./build.sh
          echo "Running build script on ${{ matrix.os }}..."
          # Tell build.sh to create the AppImage
          ./build.sh --appimage

      # Step 1.8: Rename the AppImage to include OS tag for clarity in releases
      - name: Determine and Prepare AppImage Filename for Upload
        id: prepare_appimage
        run: |
          # Get version from the previous step's output
          VERSION="${{ steps.get_project_version.outputs.project_version }}"
          if [ -z "$VERSION" ]; then echo "ERROR: Project version is empty. Cannot determine filename."; exit 1; fi

          # Create an OS tag like 'ubuntu2004' or 'ubuntu2404' from the matrix variable
          OS_TAG=$(echo "${{ matrix.os }}" | sed -e 's/ubuntu-//' -e 's/\.//g')

          # Define original and new filenames
          ORIGINAL_FILENAME="chromadesk-${VERSION}-x86_64.AppImage"
          NEW_FILENAME="chromadesk-${VERSION}-x86_64-${OS_TAG}.AppImage"

          # Check if the build script actually produced the expected file
          echo "Checking for original file: ${ORIGINAL_FILENAME}"
          if [[ ! -f "${ORIGINAL_FILENAME}" ]]; then
            echo "ERROR: Expected AppImage file ${ORIGINAL_FILENAME} not found after build!"
            echo "Listing directory contents:"
            ls -lAh . ; echo "Listing *.AppImage files:" ; ls -l *.AppImage
            exit 1
          fi

          # Rename the file
          echo "Renaming ${ORIGINAL_FILENAME} to ${NEW_FILENAME}"
          mv "${ORIGINAL_FILENAME}" "${NEW_FILENAME}"

          # Set the new filename as output for the upload step
          echo "filename=${NEW_FILENAME}" >> $GITHUB_OUTPUT
          echo "AppImage prepared for upload: ${NEW_FILENAME}"

      # Step 1.9: Upload the renamed AppImage as a workflow artifact
      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          # Unique name for the artifact based on the OS build
          name: chromadesk-appimage-${{ matrix.os }}
          # Path to the file to upload (using output from previous step)
          path: ${{ steps.prepare_appimage.outputs.filename }}
          # How long to keep the artifact (short retention is fine as it's used by the release job)
          retention-days: 1

  # == JOB 2: Create the GitHub Release ==
  release:
    # User-friendly name for the job
    name: Create GitHub Release
    # This job depends on the successful completion of ALL matrix builds in the 'build' job
    needs: build
    # Use a standard, lightweight runner for this job
    runs-on: ubuntu-latest

    steps:
      # Step 2.1: Download all artifacts produced by the 'build' job matrix runs
      - name: Download all AppImage artifacts
        uses: actions/download-artifact@v4
        with:
          # If 'name' is not specified, it downloads all artifacts from the workflow run.
          # They will be placed in the specified 'path' directory,
          # usually preserving the artifact name as a subdirectory structure.
          path: appimages

      # Step 2.2: Verify downloaded files (optional but helpful for debugging)
      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:"
          ls -lR appimages/
          # Example expected structure:
          # appimages/
          # ├── chromadesk-appimage-ubuntu-20.04/
          # │   └── chromadesk-X.Y.Z-x86_64-ubuntu2004.AppImage
          # └── chromadesk-appimage-ubuntu-24.04/
          #     └── chromadesk-X.Y.Z-x86_64-ubuntu2404.AppImage

      # Step 2.3: Create the release and upload the downloaded AppImages
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Use a glob pattern to find all .AppImage files within the download directory structure
          files: appimages/*/*.AppImage
          # Use the tag that triggered this workflow run
          tag_name: ${{ github.ref_name }}
          # Title for the GitHub Release page
          name: Release ${{ github.ref_name }} (Multi-Build LTS)
          # Body/description for the release, explaining the different files
          body: |
            Automated AppImage release for ChromaDesk ${{ github.ref_name }}.

            This release includes builds for different compatibility targets based on Ubuntu LTS versions:

            *   **`...-ubuntu2004.AppImage`**: Built on Ubuntu 20.04 (GLIBC 2.31). Recommended for **older systems** (e.g., Ubuntu 20.04, Debian 11, RHEL 8 derivatives).
            *   **`...-ubuntu2404.AppImage`**: Built on Ubuntu 24.04 (GLIBC 2.39). Recommended for **very recent systems** (e.g., Ubuntu 24.04+, Fedora 40+, Debian 13+/testing). Should provide the best experience on modern desktops.

            Please download the version appropriate for your Linux distribution.
          # Set draft/prerelease status as needed
          draft: false
          prerelease: false
        env:
          # The action needs the GitHub token to interact with the API
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}