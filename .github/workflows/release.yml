name: Build and Release AppImage

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v0.1.0, v1.0.0 etc.

permissions:
  contents: write # Required to create releases and upload assets

jobs:
  build-release:
    name: Build and Release ChromaDesk AppImage
    # Use an older LTS release for better GLIBC compatibility
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Specify your project's Python version if different

      - name: Install System Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            patchelf \
            desktop-file-utils \
            libfuse2 \
            fakeroot
            # appimagetool is not in standard repos, download manually

      - name: Download and Install appimagetool
        run: |
          APPIMAGETOOL_URL="https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          echo "Downloading appimagetool from ${APPIMAGETOOL_URL}..."
          wget -q "${APPIMAGETOOL_URL}" -O appimagetool.AppImage
          chmod +x appimagetool.AppImage
          sudo mv appimagetool.AppImage /usr/local/bin/appimagetool
          echo "appimagetool installed to /usr/local/bin/appimagetool"

      - name: Get Project Version from pyproject.toml
        id: get_project_version
        run: |
          # --- Check which version key exists in pyproject.toml --- 
          # Assuming standard [project] table or [tool.poetry]
          VERSION_CMD=""
          if python -c "import tomllib; data=tomllib.load(open('pyproject.toml', 'rb')); exit(0) if 'project' in data and 'version' in data['project'] else exit(1)"; then
            VERSION_CMD="import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])"
            echo "Reading version from [project][version]"
          elif python -c "import tomllib; data=tomllib.load(open('pyproject.toml', 'rb')); exit(0) if 'tool' in data and 'poetry' in data['tool'] and 'version' in data['tool']['poetry'] else exit(1)"; then
            VERSION_CMD="import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['tool']['poetry']['version'])"
            echo "Reading version from [tool][poetry][version]"
          else
            echo "ERROR: Could not find [project][version] or [tool][poetry][version] in pyproject.toml"
            exit 1
          fi
          
          PROJECT_VERSION=$(python -c "${VERSION_CMD}")
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "Project version found: ${PROJECT_VERSION}"
          # --- End version check --- 

      - name: Install Python Build Dependencies & Project
        run: |
          python -m pip install --upgrade pip
          # Install build tools
          pip install build setuptools wheel 
          # Install project and its dependencies
          pip install . # Installs dependencies from pyproject.toml

      - name: Build AppImage using build.sh
        run: |
          chmod +x ./build.sh
          ./build.sh --appimage

      - name: Determine AppImage Filename
        id: get_appimage_filename
        run: |
          # VERSION="${{ github.ref_name }}" # Get tag like v0.2.0
          # VERSION="${VERSION#v}" # Remove leading 'v' -> 0.2.0
          VERSION="${{ steps.get_project_version.outputs.project_version }}" # Use version from pyproject.toml
          FILENAME="chromadesk-${VERSION}-x86_64.AppImage"
          echo "filename=${FILENAME}" >> $GITHUB_OUTPUT
          echo "Checking for file: ${FILENAME} (using version ${VERSION} from project file)"
          if [[ ! -f "${FILENAME}" ]]; then
            echo "ERROR: Expected AppImage file ${FILENAME} not found!"
            ls -l *.AppImage # List found AppImages for debugging
            exit 1
          fi

      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.get_appimage_filename.outputs.filename }}
          tag_name: ${{ github.ref_name }} # Use the tag that triggered workflow
          name: Release ${{ github.ref_name }}
          body: "Automated AppImage release for ChromaDesk ${{ github.ref_name }}"
          draft: false
          prerelease: false # Set to true if these are pre-releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions 